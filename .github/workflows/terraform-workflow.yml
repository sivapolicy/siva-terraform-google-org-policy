name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  boolean_org_exclude:
    name: 'boolean_org_exclude'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: configure gcloud
      uses: GoogleCloudPlatform/setup-gcloud@master
      with:
          version: "latest"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ./boolean_org_exclude
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ./boolean_org_exclude
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ./boolean_org_exclude
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}

  boolean_proj_allow:
    name: 'boolean_proj_allow'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ./boolean_proj_allow
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}
     
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ./boolean_proj_allow
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 1.0.3
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ./boolean_proj_allow
          tf_actions_comment: true
      env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY}}
    
      
